######################################################
#
# Helper
#
# Services: Tautili, Kometa, Recycler
#
######################################################

services:
  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - PUID=1000
      - PGID=1000
    env_file: .env
    volumes:
      - ${DATA_DIR}/media-server/tautulli/config:/config
      # timezone
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.tautulli-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr-bypass.rule=Host(`tautulli.$DOMAIN`) && Header(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.tautulli-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAIN`)"
      - "traefik.http.routers.tautulli-rtr.priority=99"
      ## Enable tls
      - "traefik.http.routers.tautulli-rtr.tls=true"
      - "traefik.http.routers.tautulli-rtr-bypass.tls=true"
      ## Middleware
      - "traefik.http.routers.tautulli-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-github-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.routers.tautulli-rtr-bypass.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"
      - "dev.dozzle.group=Smart Media"

  notifiarr:
    container_name: notifiarr
    hostname: notifiarr
    image: golift/notifiarr
    restart: unless-stopped
    privileged: true # Enables privileged mode
    env_file: .env
    environment:
      - DN_SNAPSHOT_NVIDIA_SMI_PATH=/usr/bin/nvidia-smi
    networks:
      - traefik_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities:
                - gpu
    # ports:
    #   - "5454:5454"
    volumes:
      - ${DATA_DIR}/media-server/notifiarr:/config
      - /var/run/utmp:/var/run/utmp
      - /etc/machine-id:/etc/machine-id
      - /mnt/movie:/movie
      - /usr/bin/nvidia-smi:/usr/bin/nvidia-smi:rw

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notifiarr.rule=Host(`notifiarr.${DOMAIN}`)"
      - "traefik.http.routers.notifiarr.entrypoints=https"
      - "traefik.http.routers.notifiarr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.notifiarr.middlewares=chain-google-oauth@file"
      - "traefik.http.routers.notifiarr.middlewares=chain-no-auth@file"
    # configarr:
    #   image: ghcr.io/raydak-labs/configarr:latest
    #   container_name: configarr
    #   environment:
    #     - TZ=Etc/UTC
    #   env_file: .env
    #   networks:
    #     - traefik_network
    #   volumes:
    #     - ${DATA_DIR}/media-server/configarr/config:/app/config # Contains the config.yml and secrets.yml
    #     - ${DATA_DIR}/media-server/configarr/dockerrepos:/app/repos # Cache repositories
    #     # - ${DATA_DIR}/media-server/configarr/custom/cfs:/app/cfs # Optional if custom formats locally provided
    #     # - ${DATA_DIR}/media-server/configarr/custom/templates:/app/templates # Optional if custom templates
    #   restart: "always" # optional make sure this is set to no or removed. Default is no

    # recyclarr:
    #   image: ghcr.io/recyclarr/recyclarr
    #   container_name: recyclarr
    #   user: 1000:1000
    #   env_file: .env
    #   networks:
    #     - traefik_network
    #   volumes:
    #     - ${DATA_DIR}/media-server/recyclarr:/config
    #     # # timezone
    #     # - /etc/localtime:/etc/localtime:ro
    # labels:
    #   - "dev.dozzle.group=Smart Media"
    #   #  kometa:
    #   #    image: kometateam/kometa
    #   #    container_name: kometa
    #   #    volumes:
    #   #      - ${DATA_DIR}/kometa/config:/config
    #   #    restart: unless-stopped
    #   #    networks:
    #   #      - traefik_network
    #   #    command: --run  kometa:
    #   #    image: kometateam/kometa
    #   #    container_name: kometa
    #   #    volumes:
    #   #      - ${DATA_DIR}/kometa/config:/config
    #   #    restart: unless-stopped
    #   #    networks:
    #   #      - traefik_network
    #   #    command: --run

networks:
  traefik_network:
    external: true
