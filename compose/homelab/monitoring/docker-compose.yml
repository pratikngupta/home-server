services:
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    env_file: .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CERTS_DIR}:/certs:ro
    networks:
      - traefik_network
    ports:
      - 8090:8080
    environment:
      DOZZLE_REMOTE_HOST: ${DOZZLE_REMOTE_HOST}
      DOZZLE_HOSTNAME: ${DOZZLE_HOSTNAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`logs.${EXTERNAL_DOMAIN}`)"
      - "traefik.http.routers.dozzle.entrypoints=https"
      - "traefik.http.routers.dozzle.tls=true"
      ## Middlewares
      - "traefik.http.routers.dozzle.middlewares=chain-google-oauth@file"
      # set higher priority to the local dozzle
      - "traefik.http.routers.dozzle.priority=1"
      - dev.dozzle.group=Logs

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    networks:
      - traefik_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_SCHEDULE=0 0 8 * * *
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=discord://4mpsphpztftygTO1eGUV9QcBYLEzE-dPGCAw690Bb2Q4f7mFq9jEGhNzO-IxkxoxcI2p@1268397860228042826
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_HTTP_API_TOKEN}
      - WATCHTOWER_HTTP_API_METRICS=true
      - WATCHTOWER_CLEANUP=true

    labels:
      - "traefik.enable=false"
      - dev.dozzle.group=Monitoring

  speedtest:
    restart: unless-stopped
    container_name: speedtest
    image: openspeedtest/latest
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.speedtest.rule=Host(`speedtest.${DOMAIN}`)"
      - "traefik.http.routers.speedtest.entrypoints=https"
      - "traefik.http.routers.speedtest.tls=true"
      - "traefik.http.services.speedtest.loadbalancer.server.port=3000"
      - "traefik.http.routers.speedtest.middlewares=chain-github-oauth@file"
      - dev.dozzle.group=Monitoring

  glances:
    container_name: glances
    image: nicolargo/glances:latest
    restart: always
    # port 61208
    # ports:
    #   - 61208:61208
    networks:
      - traefik_network
    environment:
      - GLANCES_OPT=-w
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /mnt/main:/mnt/main:ro
      - /:/host:ro
    pid: "host"
    # Uncomment for GPU compatibility (Nvidia) inside the container
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    labels:
      - dev.dozzle.group=Monitoring

        #  statping:
        #    container_name: statping
        #    image: statping/statping:dev
        #    restart: always
        #    volumes:
        #      - ${DATA_DIR}/statping:/app
        #    environment:
        #      DB_CONN: sqlite
        #    env_file: .env
        #    networks:
        #      - traefik_network
        #    labels:
        #      - "traefik.enable=true"
        #      - "traefik.http.routers.statping.rule=Host(`statping.${DOMAIN}`)"
        #      - "traefik.http.routers.statping.entrypoints=https"
        #      - "traefik.http.routers.statping.tls=true"
        #      - "traefik.http.services.statping.loadbalancer.server.port=8080"
        #      - "traefik.http.routers.statping.middlewares=chain-github-oauth@file"
        #      - dev.dozzle.group=Monitoring

networks:
  traefik_network:
    external: true

  # uptime-kuma:
  #   image: louislam/uptime-kuma:beta
  #   container_name: uptime-kuma
  #   volumes:
  #     - ${DATA_DIR}/kuma:/app/data
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   restart: unless-stopped
  #   env_file: .env
  #   networks:
  #     - traefik_network
  #   labels:
  #     - "traefik.enable=true"
  #     # - "traefik.http.routers.kuma.rule=Host(`kuma.${EXTERNAL_DOMAIN}`)"
  #     # - "traefik.http.routers.kuma.entrypoints=https"
  #     # - "traefik.http.routers.kuma.tls=true"
  #     # - "traefik.http.services.kuma.loadbalancer.server.port=3001"
  #     # - "traefik.http.routers.kuma.middlewares=chain-github-oauth@file,kuma-theme@file"

  #     ## internal domain
  #     - "traefik.http.routers.kuma-internal.rule=Host(`kuma.${DOMAIN}`)"
  #     - "traefik.http.routers.kuma-internal.entrypoints=https"
  #     - "traefik.http.routers.kuma-internal.tls=true"
  #     - "traefik.http.services.kuma-internal.loadbalancer.server.port=3001"
  #     - "traefik.http.routers.kuma-internal.middlewares=chain-github-oauth@file"
  # dockge:
  #   image: louislam/dockge:nightly
  #   container_name: dockge
  #   restart: unless-stopped
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ${DATA_DIR}/dockge:/app/data
  #     - ${DOCKGE_STACKS_DIR}:${DOCKGE_STACKS_DIR}
  #   env_file: .env
  #   environment:
  #     # Tell Dockge where to find the stacks
  #     - DOCKGE_STACKS_DIR=${DOCKGE_STACKS_DIR}
  #   networks:
  #     - traefik_network

  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.dockge.rule=Host(`dockge.${DOMAIN}`)"
  #     - "traefik.http.routers.dockge.entrypoints=https"
  #     - "traefik.http.routers.dockge.tls=true"
  #     - "traefik.http.services.dockge.loadbalancer.server.port=5001"
  #     - "traefik.http.routers.dockge.middlewares=chain-github-oauth@file"

  # diun:
  #   container_name: diun
  #   image: crazymax/diun:latest
  #   command: serve
  #   networks:
  #     - traefik_network
  #   volumes:
  #     - ${DATA_DIR}/diun:/data
  #     - ${DATA_DIR}/diun/diun.yml:/diun.yml:ro
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - TZ=America/Toronto
  #     - LOG_LEVEL=info
  #     - LOG_JSON=false
  #   restart: always
